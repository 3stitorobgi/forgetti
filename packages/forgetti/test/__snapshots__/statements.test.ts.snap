// Vitest Snapshot v1

exports[`statements > should optimize do-while statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c2 = _useMemo(() => new Array(1), []);
  let i = 0;
  let _c = _c2[0] || (_c2[0] = []),
    _id = 0;
  do {
    let _lid = _id++,
      _l = _c[_lid] || (_c[_lid] = new Array(2));
    let _eq = Object.is(_l[0], i),
      _v = _eq ? _l[0] : _l[0] = i;
    let _v2 = _eq ? _l[1] : _l[1] = console.log(_v);
    _v2;
    let _v3 = i += 1;
    _v3;
  } while (i < props.x);
}"
`;

exports[`statements > should optimize for statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c2 = _useMemo(() => new Array(1), []);
  let _c = _c2[0] || (_c2[0] = []),
    _id = 0;
  for (let i = 0; i < 10; i += 1) {
    let _lid = _id++,
      _l = _c[_lid] || (_c[_lid] = new Array(2));
    let _eq = Object.is(_l[0], i),
      _v = _eq ? _l[0] : _l[0] = i;
    let _v2 = _eq ? _l[1] : _l[1] = console.log(_v);
    _v2;
  }
}"
`;

exports[`statements > should optimize for-in statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c = _useMemo(() => new Array(3), []);
  let _eq = Object.is(_c[0], props),
    _v = _eq ? _c[0] : _c[0] = props;
  let _v2 = _eq ? _c[1] : _c[1] = _v.arr;
  let _c2 = _c[2] || (_c[2] = []),
    _id = 0;
  for (const x in _v2) {
    let _lid = _id++,
      _l = _c2[_lid] || (_c2[_lid] = new Array(2));
    let _eq2 = Object.is(_l[0], x),
      _v3 = _eq2 ? _l[0] : _l[0] = x;
    let _v4 = _eq2 ? _l[1] : _l[1] = console.log(_v3);
    _v4;
  }
}"
`;

exports[`statements > should optimize for-of statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c = _useMemo(() => new Array(3), []);
  let _eq = Object.is(_c[0], props),
    _v = _eq ? _c[0] : _c[0] = props;
  let _v2 = _eq ? _c[1] : _c[1] = _v.arr;
  let _c2 = _c[2] || (_c[2] = []),
    _id = 0;
  for (const x of _v2) {
    let _lid = _id++,
      _l = _c2[_lid] || (_c2[_lid] = new Array(2));
    let _eq2 = Object.is(_l[0], x),
      _v3 = _eq2 ? _l[0] : _l[0] = x;
    let _v4 = _eq2 ? _l[1] : _l[1] = console.log(_v3);
    _v4;
  }
}"
`;

exports[`statements > should optimize if statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c = _useMemo(() => new Array(5), []);
  let _eq = Object.is(_c[0], props),
    _v = _eq ? _c[0] : _c[0] = props;
  let _v2 = _eq ? _c[1] : _c[1] = _v.type;
  let _eq2 = Object.is(_c[2], _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2;
  if (_v3 === 'a') {
    let _c2 = _c[3] || (_c[3] = new Array(3));
    let _v4 = _eq ? _c2[0] : _c2[0] = _v.value;
    let _eq3 = Object.is(_c2[1], _v4),
      _v5 = _eq3 ? _c2[1] : _c2[1] = _v4;
    let _v6 = _eq3 ? _c2[2] : _c2[2] = examples.a(_v5);
    return _v6;
  } else {
    let _c3 = _c[4] || (_c[4] = new Array(3));
    let _v7 = _eq ? _c3[0] : _c3[0] = _v.value;
    let _eq4 = Object.is(_c3[1], _v7),
      _v8 = _eq4 ? _c3[1] : _c3[1] = _v7;
    let _v9 = _eq4 ? _c3[2] : _c3[2] = examples.b(_v8);
    return _v9;
  }
}"
`;

exports[`statements > should optimize switch statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c = _useMemo(() => new Array(6), []);
  let _eq = Object.is(_c[0], props),
    _v = _eq ? _c[0] : _c[0] = props;
  let _v2 = _eq ? _c[1] : _c[1] = _v.type;
  switch (_v2) {
    case 'a':
      let _c2 = _c[2] || (_c[2] = new Array(3));
      let _v3 = _eq ? _c2[0] : _c2[0] = _v.value;
      let _eq2 = Object.is(_c2[1], _v3),
        _v4 = _eq2 ? _c2[1] : _c2[1] = _v3;
      let _v5 = _eq2 ? _c2[2] : _c2[2] = examples.a(_v4);
      return _v5;
    case 'b':
      let _c3 = _c[3] || (_c[3] = new Array(3));
      let _v6 = _eq ? _c3[0] : _c3[0] = _v.value;
      let _eq3 = Object.is(_c3[1], _v6),
        _v7 = _eq3 ? _c3[1] : _c3[1] = _v6;
      let _v8 = _eq3 ? _c3[2] : _c3[2] = examples.b(_v7);
      return _v8;
    case 'c':
      let _c4 = _c[4] || (_c[4] = new Array(3));
      let _v9 = _eq ? _c4[0] : _c4[0] = _v.value;
      let _eq4 = Object.is(_c4[1], _v9),
        _v10 = _eq4 ? _c4[1] : _c4[1] = _v9;
      let _v11 = _eq4 ? _c4[2] : _c4[2] = examples.c(_v10);
      return _v11;
    default:
      let _c5 = _c[5] || (_c[5] = new Array(3));
      let _v12 = _eq ? _c5[0] : _c5[0] = _v.value;
      let _eq5 = Object.is(_c5[1], _v12),
        _v13 = _eq5 ? _c5[1] : _c5[1] = _v12;
      let _v14 = _eq5 ? _c5[2] : _c5[2] = examples.default(_v13);
      return _v14;
  }
}"
`;

exports[`statements > should optimize try statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c2 = _useMemo(() => new Array(3), []);
  try {
    let _c = _c2[0] || (_c2[0] = new Array(2));
    let _eq = Object.is(_c[0], props),
      _v = _eq ? _c[0] : _c[0] = props;
    let _v2 = _eq ? _c[1] : _c[1] = _v.a();
    _v2;
  } catch (e) {
    let _c3 = _c2[1] || (_c2[1] = new Array(3));
    let _eq2 = Object.is(_c3[0], props),
      _v3 = _eq2 ? _c3[0] : _c3[0] = props;
    let _eq3 = Object.is(_c3[1], e),
      _v4 = _eq3 ? _c3[1] : _c3[1] = e;
    let _eq4 = _eq2 && _eq3,
      _v5 = _eq4 ? _c3[2] : _c3[2] = _v3.b(_v4);
    _v5;
  } finally {
    let _c4 = _c2[2] || (_c2[2] = new Array(2));
    let _eq5 = Object.is(_c4[0], props),
      _v6 = _eq5 ? _c4[0] : _c4[0] = props;
    let _v7 = _eq5 ? _c4[1] : _c4[1] = _v6.c();
    _v7;
  }
}"
`;

exports[`statements > should optimize while statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c2 = _useMemo(() => new Array(1), []);
  let i = 0;
  let _c = _c2[0] || (_c2[0] = []),
    _id = 0;
  while (i < props.x) {
    let _lid = _id++,
      _l = _c[_lid] || (_c[_lid] = new Array(2));
    let _eq = Object.is(_l[0], i),
      _v = _eq ? _l[0] : _l[0] = i;
    let _v2 = _eq ? _l[1] : _l[1] = console.log(_v);
    _v2;
    let _v3 = i += 1;
    _v3;
  }
}"
`;
