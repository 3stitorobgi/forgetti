// Vitest Snapshot v1

exports[`hooks > should optimize useCallback 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { useCallback } from 'react';
function Example(props) {
  let _c = _useMemo(() => new Array(2), []);
  let _v = _c[0] ||= [example];
  let _v2 = _v ? _c[1] : _c[1] = () => props.value();
  return _v2;
}"
`;

exports[`hooks > should optimize useEffect 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { useEffect } from 'react';
function Example(props) {
  let _c = _useMemo(() => new Array(1), []);
  let _v = _c[0] ||= [example];
  useEffect(() => props.value(), [_v]);
}"
`;

exports[`hooks > should optimize useMemo 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { useMemo } from 'react';
function Example(props) {
  let _c = _useMemo(() => new Array(2), []);
  let _v = _c[0] ||= [example];
  let _v2 = _v ? _c[1] : _c[1] = (() => props.value())();
  return _v2;
}"
`;

exports[`hooks > should optimize useRef 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { useRef } from 'react';
function Example(props) {
  let _c = _useMemo(() => new Array(1), []);
  let _v = _c[0] ||= {
    current: props.value
  };
  return _v;
}"
`;
