// Vitest Snapshot v1

exports[`hooks > should optimize useCallback 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { useCallback } from 'react';
function Example(props) {
  let _c = _useMemo(() => new Array(6), []),
    _eq = Object.is(_c[0], props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.value,
    _eq2 = Object.is(_c[2], _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _v4 = _eq2 ? _c[3] : _c[3] = [_v3],
    _eq3 = Object.is(_c[4], _v4),
    _v5 = _eq3 ? _c[4] : _c[4] = _v4,
    _v6 = _eq3 ? _c[5] : _c[5] = () => props.value();
  return _v6;
}"
`;

exports[`hooks > should optimize useEffect 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { useEffect } from 'react';
function Example(props) {
  let _c = _useMemo(() => new Array(4), []),
    _eq = Object.is(_c[0], props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.example,
    _eq2 = Object.is(_c[2], _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _v4 = _eq2 ? _c[3] : _c[3] = [_v3];
  useEffect(() => props.value(), [_v4]);
}"
`;

exports[`hooks > should optimize useMemo 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { useMemo } from 'react';
function Example(props) {
  let _c = _useMemo(() => new Array(6), []),
    _eq = Object.is(_c[0], props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.value,
    _eq2 = Object.is(_c[2], _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _v4 = _eq2 ? _c[3] : _c[3] = [_v3],
    _eq3 = Object.is(_c[4], _v4),
    _v5 = _eq3 ? _c[4] : _c[4] = _v4,
    _v6 = _eq3 ? _c[5] : _c[5] = (() => props.value())();
  return _v6;
}"
`;

exports[`hooks > should optimize useRef 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { useRef } from 'react';
function Example(props) {
  let _c = _useMemo(() => new Array(1), []),
    _v = _c[0] ||= {
      current: props.value
    };
  return _v;
}"
`;
