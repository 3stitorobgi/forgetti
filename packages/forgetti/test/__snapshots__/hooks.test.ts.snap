// Vitest Snapshot v1

exports[`hooks > should correct transform any nested hooks call 1`] = `
"import { useA, useB, useC, useD, useE, useF, useG, useH } from 'whatever';
function Example(props) {
  let a = null;
  return useA(useB(), [useC(), 'array'], {
    d: useD(),
    [useE()]: useF(),
    ...useG()
  }, \`testA\${useH()}testB\`, useI() === useJ(), a = useK(), ...useJ());
}"
`;

exports[`hooks > should correct transform nested hooks call (issue #14) 1`] = `
"import { useDeferredValue } from 'react';
import { useAtomValue } from 'jotai';
import { stateAtom } from 'whatever';
function Example(props) {
  return useDeferredValue(useAtomValue(stateAtom));
}"
`;

exports[`hooks > should optimize useCallback 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 5),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.value,
    _eq2 = _$$equals(_c, 2, _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _v4 = _eq2 ? _c[3] : _c[3] = [_v3],
    _v5 = _eq2 ? _c[4] : _c[4] = () => props.value();
  return _v5;
}"
`;

exports[`hooks > should optimize useCallback with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 2),
    _v = 0 in _c ? _c[0] : _c[0] = [],
    _v2 = 1 in _c ? _c[1] : _c[1] = () => props.value();
  return _v2;
}"
`;

exports[`hooks > should optimize useCallback with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useCallback } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 2),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = () => props.value();
  return _v2;
}"
`;

exports[`hooks > should optimize useEffect 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 4),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.example,
    _eq2 = _$$equals(_c, 2, _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _v4 = _eq2 ? _c[3] : _c[3] = [_v3];
  useEffect(() => props.value(), [_v4]);
}"
`;

exports[`hooks > should optimize useEffect with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 1),
    _v = 0 in _c ? _c[0] : _c[0] = [];
  useEffect(() => props.value(), [_v]);
}"
`;

exports[`hooks > should optimize useEffect with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useEffect } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 2),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = () => props.value();
  useEffect(_v2, [_v2]);
}"
`;

exports[`hooks > should optimize useMemo 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 5),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = _v.value,
    _eq2 = _$$equals(_c, 2, _v2),
    _v3 = _eq2 ? _c[2] : _c[2] = _v2,
    _v4 = _eq2 ? _c[3] : _c[3] = [_v3],
    _v5 = _eq2 ? _c[4] : _c[4] = (() => props.value())();
  return _v5;
}"
`;

exports[`hooks > should optimize useMemo with 0 dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 2),
    _v = 0 in _c ? _c[0] : _c[0] = [],
    _v2 = 1 in _c ? _c[1] : _c[1] = (() => props.value())();
  return _v2;
}"
`;

exports[`hooks > should optimize useMemo with auto dependencies 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { $$equals as _$$equals } from \\"forgetti/runtime\\";
import { useMemo } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 3),
    _eq = _$$equals(_c, 0, props),
    _v = _eq ? _c[0] : _c[0] = props,
    _v2 = _eq ? _c[1] : _c[1] = () => props.value(),
    _v3 = _eq ? _c[2] : _c[2] = _v2();
  return _v3;
}"
`;

exports[`hooks > should optimize useRef 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
import { $$cache as _$$cache } from \\"forgetti/runtime\\";
import { useRef } from 'react';
function Example(props) {
  let _c = _$$cache(_useMemo, 1),
    _v = 0 in _c ? _c[0] : _c[0] = {
      current: props.value
    };
  return _v;
}"
`;
