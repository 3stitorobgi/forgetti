// Vitest Snapshot v1

exports[`statements > should optimize for-of statements 1`] = `
"import { useMemo as _useMemo } from \\"react\\";
function Example(props) {
  let _c = _useMemo(() => new Array(4), []);
  let _eq = Object.is(_c[0], props),
    _v2 = _eq ? _c[0] : _c[0] = props;
  let _v3 = _eq ? _c[1] : _c[1] = _v2.a;
  let _v;
  if (_v3) {
    let _c2 = _c[2] || (_c[2] = new Array(3));
    let _v5 = _eq ? _c2[0] : _c2[0] = _v2.b;
    let _v4;
    if (_v5) {
      let _c3 = _c2[1] || (_c2[1] = new Array(1));
      let _v6 = _eq ? _c3[0] : _c3[0] = _v2.c;
      _v4 = _v6;
    } else {
      let _c4 = _c2[2] || (_c2[2] = new Array(1));
      let _v7 = _eq ? _c4[0] : _c4[0] = _v2.d;
      _v4 = _v7;
    }
    _v = _v4;
  } else {
    let _c5 = _c[3] || (_c[3] = new Array(3));
    let _v9 = _eq ? _c5[0] : _c5[0] = _v2.e;
    let _v8;
    if (_v9) {
      let _c6 = _c5[1] || (_c5[1] = new Array(1));
      let _v10 = _eq ? _c6[0] : _c6[0] = _v2.f;
      _v8 = _v10;
    } else {
      let _c7 = _c5[2] || (_c5[2] = new Array(1));
      let _v11 = _eq ? _c7[0] : _c7[0] = _v2.g;
      _v8 = _v11;
    }
    _v = _v8;
  }
  return _v;
}"
`;
